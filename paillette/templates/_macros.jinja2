{%- macro follow_menu(active, start) -%}
  <ul class="follow">
    {% for key, label in (('artist', 'Artistes'), ('costume', 'Costume'), ('makeup', 'Makeup'), ('sound', 'Sound'), ('vehicle', 'Véhicules'), ('card', 'Cartes bleues'), ('beeper', 'Bip d’autoroute')) %}
      <li><a class="{{ key }} {{ 'active' if key == active }}" href="{{ url_for(key + 's_followup', year=start.year, month=start.month) }}">{{ label }}</a></li>
    {% endfor %}
  </ul>
{%- endmacro -%}

{%- macro table_update_script() -%}
  <script>
    function updateCellStyling(cell) {
      /* Work around WebKit bug for cell background */
      cell.setAttribute("style", cell.getAttribute("style") + " ");
      cell.setAttribute("style", cell.getAttribute("style").trim());
    }

    function update(select, elementType, elementId, date) {
      oldTextContent = select.nextElementSibling.textContent
      select.nextElementSibling.textContent = "?"
      let data = new FormData()
      data.append("spectacle_id", select.value)
      fetch(
        `/followup/${elementType}/${elementId}/${date}/update`,
        {"method": "POST", "body": data}
      ).then(
        response => response.json()
      ).then(data => {
        let currentCell = select.parentNode
        updateCellStyling(currentCell);

        select.nextElementSibling.textContent = `${oldTextContent} ${data.value}`
        for (let i = 0; i < data.previous; i++) {
          currentCell = currentCell.previousElementSibling
          currentCell.querySelector("span").textContent += ` ${data.value}`
          updateCellStyling(currentCell);
        }
        currentCell = select.parentNode
        for (let i = 0; i < data.next; i++) {
          currentCell = currentCell.nextElementSibling
          currentCell.querySelector("span").textContent += ` ${data.value}`
          updateCellStyling(currentCell);
        }
        data.removed.forEach(spectacle => {
          currentCell = select.parentNode
          let span = currentCell.querySelector("span")
          span.textContent = span.textContent.replaceAll(spectacle.value, "").trim()
          for (let i = 0; i < spectacle.previous; i++) {
            currentCell = currentCell.previousElementSibling
            span = currentCell.querySelector("span")
            span.textContent = span.textContent.replaceAll(spectacle.value, "").trim()
            updateCellStyling(currentCell);
          }
          currentCell = select.parentNode
          for (let i = 0; i < spectacle.next; i++) {
            currentCell = currentCell.nextElementSibling
            span = currentCell.querySelector("span")
            span.textContent = span.textContent.replaceAll(spectacle.value, "").trim()
            updateCellStyling(currentCell);
          }
        })
      })
    }
  </script>
{%- endmacro -%}
